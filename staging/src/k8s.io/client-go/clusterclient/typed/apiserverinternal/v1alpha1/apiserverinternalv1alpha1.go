//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	apiserverinternalapiv1alpha1 "k8s.io/api/apiserverinternal/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	apiserverinternalapplyv1alpha1 "k8s.io/client-go/applyconfigurations/apiserverinternal/v1alpha1"
	apiserverinternalv1alpha1 "k8s.io/client-go/kubernetes/typed/apiserverinternal/v1alpha1"
	"k8s.io/client-go/rest"
)

// WrappedApiserverinternalV1alpha1 wraps the client interface with a
// logical cluster.
type WrappedApiserverinternalV1alpha1 struct {
	cluster  logicalcluster.Name
	delegate apiserverinternalv1alpha1.ApiserverinternalV1alpha1Interface
}

// New creates a WrappedApiserverinternalV1alpha1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate apiserverinternalv1alpha1.ApiserverinternalV1alpha1Interface) *WrappedApiserverinternalV1alpha1 {
	return &WrappedApiserverinternalV1alpha1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedApiserverinternalV1alpha1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedApiserverinternalV1alpha1 contains the wrapped logical cluster and interface.
func (w *WrappedApiserverinternalV1alpha1) StorageVersions() apiserverinternalv1alpha1.StorageVersionInterface {
	return &wrappedStorageVersion{
		cluster:  w.cluster,
		delegate: w.delegate.StorageVersions(),
	}
}

type wrappedStorageVersion struct {
	cluster  logicalcluster.Name
	delegate apiserverinternalv1alpha1.StorageVersionInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedStorageVersion. It errors when
// there is a mismatch.
func (w *wrappedStorageVersion) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements StorageVersionInterface.
func (w *wrappedStorageVersion) Get(ctx context.Context, name string, opts metav1.GetOptions) (*apiserverinternalapiv1alpha1.StorageVersion, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements StorageVersionInterface.
func (w *wrappedStorageVersion) List(ctx context.Context, opts metav1.ListOptions) (*apiserverinternalapiv1alpha1.StorageVersionList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements StorageVersionInterface.
func (w *wrappedStorageVersion) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements StorageVersionInterface.
func (w *wrappedStorageVersion) Create(ctx context.Context, storageVersion *apiserverinternalapiv1alpha1.StorageVersion, opts metav1.CreateOptions) (*apiserverinternalapiv1alpha1.StorageVersion, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, storageVersion, opts)
}

// Update implements StorageVersionInterface.
func (w *wrappedStorageVersion) Update(ctx context.Context, storageVersion *apiserverinternalapiv1alpha1.StorageVersion, opts metav1.UpdateOptions) (*apiserverinternalapiv1alpha1.StorageVersion, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, storageVersion, opts)
}

// UpdateStatus implements StorageVersionInterface. It was generated because the type contains a Status member.
func (w *wrappedStorageVersion) UpdateStatus(ctx context.Context, storageVersion *apiserverinternalapiv1alpha1.StorageVersion, opts metav1.UpdateOptions) (*apiserverinternalapiv1alpha1.StorageVersion, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, storageVersion, opts)
}

// Delete implements StorageVersionInterface.
func (w *wrappedStorageVersion) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements StorageVersionInterface.
func (w *wrappedStorageVersion) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements StorageVersionInterface.
func (w *wrappedStorageVersion) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *apiserverinternalapiv1alpha1.StorageVersion, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements StorageVersionInterface.
func (w *wrappedStorageVersion) Apply(ctx context.Context, storageVersion *apiserverinternalapplyv1alpha1.StorageVersionApplyConfiguration, opts metav1.ApplyOptions) (result *apiserverinternalapiv1alpha1.StorageVersion, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, storageVersion, opts)
}

// ApplyStatus implements StorageVersionInterface.
func (w *wrappedStorageVersion) ApplyStatus(ctx context.Context, storageVersion *apiserverinternalapplyv1alpha1.StorageVersionApplyConfiguration, opts metav1.ApplyOptions) (result *apiserverinternalapiv1alpha1.StorageVersion, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, storageVersion, opts)
}
