//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	policyapiv1beta1 "k8s.io/api/policy/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	policyapplyv1beta1 "k8s.io/client-go/applyconfigurations/policy/v1beta1"
	policyv1beta1 "k8s.io/client-go/kubernetes/typed/policy/v1beta1"
	"k8s.io/client-go/rest"
)

// WrappedPolicyV1beta1 wraps the client interface with a
// logical cluster.
type WrappedPolicyV1beta1 struct {
	cluster  logicalcluster.Name
	delegate policyv1beta1.PolicyV1beta1Interface
}

// New creates a WrappedPolicyV1beta1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate policyv1beta1.PolicyV1beta1Interface) *WrappedPolicyV1beta1 {
	return &WrappedPolicyV1beta1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedPolicyV1beta1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedPolicyV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedPolicyV1beta1) Evictions(namespace string) policyv1beta1.EvictionInterface {
	return &wrappedEviction{
		cluster:  w.cluster,
		delegate: w.delegate.Evictions(namespace),
	}
}

type wrappedEviction struct {
	cluster  logicalcluster.Name
	delegate policyv1beta1.EvictionInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedEviction. It errors when
// there is a mismatch.
func (w *wrappedEviction) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// WrappedPolicyV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedPolicyV1beta1) PodDisruptionBudgets(namespace string) policyv1beta1.PodDisruptionBudgetInterface {
	return &wrappedPodDisruptionBudget{
		cluster:  w.cluster,
		delegate: w.delegate.PodDisruptionBudgets(namespace),
	}
}

type wrappedPodDisruptionBudget struct {
	cluster  logicalcluster.Name
	delegate policyv1beta1.PodDisruptionBudgetInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedPodDisruptionBudget. It errors when
// there is a mismatch.
func (w *wrappedPodDisruptionBudget) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements PodDisruptionBudgetInterface.
func (w *wrappedPodDisruptionBudget) Get(ctx context.Context, name string, opts metav1.GetOptions) (*policyapiv1beta1.PodDisruptionBudget, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements PodDisruptionBudgetInterface.
func (w *wrappedPodDisruptionBudget) List(ctx context.Context, opts metav1.ListOptions) (*policyapiv1beta1.PodDisruptionBudgetList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements PodDisruptionBudgetInterface.
func (w *wrappedPodDisruptionBudget) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements PodDisruptionBudgetInterface.
func (w *wrappedPodDisruptionBudget) Create(ctx context.Context, podDisruptionBudget *policyapiv1beta1.PodDisruptionBudget, opts metav1.CreateOptions) (*policyapiv1beta1.PodDisruptionBudget, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, podDisruptionBudget, opts)
}

// Update implements PodDisruptionBudgetInterface.
func (w *wrappedPodDisruptionBudget) Update(ctx context.Context, podDisruptionBudget *policyapiv1beta1.PodDisruptionBudget, opts metav1.UpdateOptions) (*policyapiv1beta1.PodDisruptionBudget, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, podDisruptionBudget, opts)
}

// UpdateStatus implements PodDisruptionBudgetInterface. It was generated because the type contains a Status member.
func (w *wrappedPodDisruptionBudget) UpdateStatus(ctx context.Context, podDisruptionBudget *policyapiv1beta1.PodDisruptionBudget, opts metav1.UpdateOptions) (*policyapiv1beta1.PodDisruptionBudget, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, podDisruptionBudget, opts)
}

// Delete implements PodDisruptionBudgetInterface.
func (w *wrappedPodDisruptionBudget) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements PodDisruptionBudgetInterface.
func (w *wrappedPodDisruptionBudget) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements PodDisruptionBudgetInterface.
func (w *wrappedPodDisruptionBudget) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *policyapiv1beta1.PodDisruptionBudget, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements PodDisruptionBudgetInterface.
func (w *wrappedPodDisruptionBudget) Apply(ctx context.Context, podDisruptionBudget *policyapplyv1beta1.PodDisruptionBudgetApplyConfiguration, opts metav1.ApplyOptions) (result *policyapiv1beta1.PodDisruptionBudget, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, podDisruptionBudget, opts)
}

// ApplyStatus implements PodDisruptionBudgetInterface.
func (w *wrappedPodDisruptionBudget) ApplyStatus(ctx context.Context, podDisruptionBudget *policyapplyv1beta1.PodDisruptionBudgetApplyConfiguration, opts metav1.ApplyOptions) (result *policyapiv1beta1.PodDisruptionBudget, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, podDisruptionBudget, opts)
}

// WrappedPolicyV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedPolicyV1beta1) PodSecurityPolicies() policyv1beta1.PodSecurityPolicyInterface {
	return &wrappedPodSecurityPolicy{
		cluster:  w.cluster,
		delegate: w.delegate.PodSecurityPolicies(),
	}
}

type wrappedPodSecurityPolicy struct {
	cluster  logicalcluster.Name
	delegate policyv1beta1.PodSecurityPolicyInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedPodSecurityPolicy. It errors when
// there is a mismatch.
func (w *wrappedPodSecurityPolicy) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Get(ctx context.Context, name string, opts metav1.GetOptions) (*policyapiv1beta1.PodSecurityPolicy, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) List(ctx context.Context, opts metav1.ListOptions) (*policyapiv1beta1.PodSecurityPolicyList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Create(ctx context.Context, podSecurityPolicy *policyapiv1beta1.PodSecurityPolicy, opts metav1.CreateOptions) (*policyapiv1beta1.PodSecurityPolicy, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, podSecurityPolicy, opts)
}

// Update implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Update(ctx context.Context, podSecurityPolicy *policyapiv1beta1.PodSecurityPolicy, opts metav1.UpdateOptions) (*policyapiv1beta1.PodSecurityPolicy, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, podSecurityPolicy, opts)
}

// Delete implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *policyapiv1beta1.PodSecurityPolicy, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Apply(ctx context.Context, podSecurityPolicy *policyapplyv1beta1.PodSecurityPolicyApplyConfiguration, opts metav1.ApplyOptions) (result *policyapiv1beta1.PodSecurityPolicy, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, podSecurityPolicy, opts)
}
