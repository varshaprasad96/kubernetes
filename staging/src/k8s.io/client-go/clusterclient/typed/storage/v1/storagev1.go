//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	storageapiv1 "k8s.io/api/storage/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	storageapplyv1 "k8s.io/client-go/applyconfigurations/storage/v1"
	storagev1 "k8s.io/client-go/kubernetes/typed/storage/v1"
	"k8s.io/client-go/rest"
)

// WrappedStorageV1 wraps the client interface with a
// logical cluster.
type WrappedStorageV1 struct {
	cluster  logicalcluster.Name
	delegate storagev1.StorageV1Interface
}

// New creates a WrappedStorageV1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate storagev1.StorageV1Interface) *WrappedStorageV1 {
	return &WrappedStorageV1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedStorageV1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedStorageV1 contains the wrapped logical cluster and interface.
func (w *WrappedStorageV1) CSIDrivers() storagev1.CSIDriverInterface {
	return &wrappedCSIDriver{
		cluster:  w.cluster,
		delegate: w.delegate.CSIDrivers(),
	}
}

type wrappedCSIDriver struct {
	cluster  logicalcluster.Name
	delegate storagev1.CSIDriverInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedCSIDriver. It errors when
// there is a mismatch.
func (w *wrappedCSIDriver) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements CSIDriverInterface.
func (w *wrappedCSIDriver) Get(ctx context.Context, name string, opts metav1.GetOptions) (*storageapiv1.CSIDriver, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements CSIDriverInterface.
func (w *wrappedCSIDriver) List(ctx context.Context, opts metav1.ListOptions) (*storageapiv1.CSIDriverList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements CSIDriverInterface.
func (w *wrappedCSIDriver) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements CSIDriverInterface.
func (w *wrappedCSIDriver) Create(ctx context.Context, cSIDriver *storageapiv1.CSIDriver, opts metav1.CreateOptions) (*storageapiv1.CSIDriver, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, cSIDriver, opts)
}

// Update implements CSIDriverInterface.
func (w *wrappedCSIDriver) Update(ctx context.Context, cSIDriver *storageapiv1.CSIDriver, opts metav1.UpdateOptions) (*storageapiv1.CSIDriver, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, cSIDriver, opts)
}

// Delete implements CSIDriverInterface.
func (w *wrappedCSIDriver) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements CSIDriverInterface.
func (w *wrappedCSIDriver) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements CSIDriverInterface.
func (w *wrappedCSIDriver) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *storageapiv1.CSIDriver, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements CSIDriverInterface.
func (w *wrappedCSIDriver) Apply(ctx context.Context, cSIDriver *storageapplyv1.CSIDriverApplyConfiguration, opts metav1.ApplyOptions) (result *storageapiv1.CSIDriver, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, cSIDriver, opts)
}

// WrappedStorageV1 contains the wrapped logical cluster and interface.
func (w *WrappedStorageV1) CSINodes() storagev1.CSINodeInterface {
	return &wrappedCSINode{
		cluster:  w.cluster,
		delegate: w.delegate.CSINodes(),
	}
}

type wrappedCSINode struct {
	cluster  logicalcluster.Name
	delegate storagev1.CSINodeInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedCSINode. It errors when
// there is a mismatch.
func (w *wrappedCSINode) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements CSINodeInterface.
func (w *wrappedCSINode) Get(ctx context.Context, name string, opts metav1.GetOptions) (*storageapiv1.CSINode, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements CSINodeInterface.
func (w *wrappedCSINode) List(ctx context.Context, opts metav1.ListOptions) (*storageapiv1.CSINodeList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements CSINodeInterface.
func (w *wrappedCSINode) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements CSINodeInterface.
func (w *wrappedCSINode) Create(ctx context.Context, cSINode *storageapiv1.CSINode, opts metav1.CreateOptions) (*storageapiv1.CSINode, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, cSINode, opts)
}

// Update implements CSINodeInterface.
func (w *wrappedCSINode) Update(ctx context.Context, cSINode *storageapiv1.CSINode, opts metav1.UpdateOptions) (*storageapiv1.CSINode, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, cSINode, opts)
}

// Delete implements CSINodeInterface.
func (w *wrappedCSINode) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements CSINodeInterface.
func (w *wrappedCSINode) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements CSINodeInterface.
func (w *wrappedCSINode) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *storageapiv1.CSINode, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements CSINodeInterface.
func (w *wrappedCSINode) Apply(ctx context.Context, cSINode *storageapplyv1.CSINodeApplyConfiguration, opts metav1.ApplyOptions) (result *storageapiv1.CSINode, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, cSINode, opts)
}

// WrappedStorageV1 contains the wrapped logical cluster and interface.
func (w *WrappedStorageV1) StorageClasses() storagev1.StorageClassInterface {
	return &wrappedStorageClass{
		cluster:  w.cluster,
		delegate: w.delegate.StorageClasses(),
	}
}

type wrappedStorageClass struct {
	cluster  logicalcluster.Name
	delegate storagev1.StorageClassInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedStorageClass. It errors when
// there is a mismatch.
func (w *wrappedStorageClass) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements StorageClassInterface.
func (w *wrappedStorageClass) Get(ctx context.Context, name string, opts metav1.GetOptions) (*storageapiv1.StorageClass, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements StorageClassInterface.
func (w *wrappedStorageClass) List(ctx context.Context, opts metav1.ListOptions) (*storageapiv1.StorageClassList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements StorageClassInterface.
func (w *wrappedStorageClass) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements StorageClassInterface.
func (w *wrappedStorageClass) Create(ctx context.Context, storageClass *storageapiv1.StorageClass, opts metav1.CreateOptions) (*storageapiv1.StorageClass, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, storageClass, opts)
}

// Update implements StorageClassInterface.
func (w *wrappedStorageClass) Update(ctx context.Context, storageClass *storageapiv1.StorageClass, opts metav1.UpdateOptions) (*storageapiv1.StorageClass, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, storageClass, opts)
}

// Delete implements StorageClassInterface.
func (w *wrappedStorageClass) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements StorageClassInterface.
func (w *wrappedStorageClass) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements StorageClassInterface.
func (w *wrappedStorageClass) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *storageapiv1.StorageClass, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements StorageClassInterface.
func (w *wrappedStorageClass) Apply(ctx context.Context, storageClass *storageapplyv1.StorageClassApplyConfiguration, opts metav1.ApplyOptions) (result *storageapiv1.StorageClass, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, storageClass, opts)
}

// WrappedStorageV1 contains the wrapped logical cluster and interface.
func (w *WrappedStorageV1) VolumeAttachments() storagev1.VolumeAttachmentInterface {
	return &wrappedVolumeAttachment{
		cluster:  w.cluster,
		delegate: w.delegate.VolumeAttachments(),
	}
}

type wrappedVolumeAttachment struct {
	cluster  logicalcluster.Name
	delegate storagev1.VolumeAttachmentInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedVolumeAttachment. It errors when
// there is a mismatch.
func (w *wrappedVolumeAttachment) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Get(ctx context.Context, name string, opts metav1.GetOptions) (*storageapiv1.VolumeAttachment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) List(ctx context.Context, opts metav1.ListOptions) (*storageapiv1.VolumeAttachmentList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Create(ctx context.Context, volumeAttachment *storageapiv1.VolumeAttachment, opts metav1.CreateOptions) (*storageapiv1.VolumeAttachment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, volumeAttachment, opts)
}

// Update implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Update(ctx context.Context, volumeAttachment *storageapiv1.VolumeAttachment, opts metav1.UpdateOptions) (*storageapiv1.VolumeAttachment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, volumeAttachment, opts)
}

// UpdateStatus implements VolumeAttachmentInterface. It was generated because the type contains a Status member.
func (w *wrappedVolumeAttachment) UpdateStatus(ctx context.Context, volumeAttachment *storageapiv1.VolumeAttachment, opts metav1.UpdateOptions) (*storageapiv1.VolumeAttachment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, volumeAttachment, opts)
}

// Delete implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *storageapiv1.VolumeAttachment, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Apply(ctx context.Context, volumeAttachment *storageapplyv1.VolumeAttachmentApplyConfiguration, opts metav1.ApplyOptions) (result *storageapiv1.VolumeAttachment, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, volumeAttachment, opts)
}

// ApplyStatus implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) ApplyStatus(ctx context.Context, volumeAttachment *storageapplyv1.VolumeAttachmentApplyConfiguration, opts metav1.ApplyOptions) (result *storageapiv1.VolumeAttachment, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, volumeAttachment, opts)
}
