//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	storageapiv1alpha1 "k8s.io/api/storage/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	storageapplyv1alpha1 "k8s.io/client-go/applyconfigurations/storage/v1alpha1"
	storagev1alpha1 "k8s.io/client-go/kubernetes/typed/storage/v1alpha1"
	"k8s.io/client-go/rest"
)

// WrappedStorageV1alpha1 wraps the client interface with a
// logical cluster.
type WrappedStorageV1alpha1 struct {
	cluster  logicalcluster.Name
	delegate storagev1alpha1.StorageV1alpha1Interface
}

// New creates a WrappedStorageV1alpha1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate storagev1alpha1.StorageV1alpha1Interface) *WrappedStorageV1alpha1 {
	return &WrappedStorageV1alpha1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedStorageV1alpha1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedStorageV1alpha1 contains the wrapped logical cluster and interface.
func (w *WrappedStorageV1alpha1) CSIStorageCapacities(namespace string) storagev1alpha1.CSIStorageCapacityInterface {
	return &wrappedCSIStorageCapacity{
		cluster:  w.cluster,
		delegate: w.delegate.CSIStorageCapacities(namespace),
	}
}

type wrappedCSIStorageCapacity struct {
	cluster  logicalcluster.Name
	delegate storagev1alpha1.CSIStorageCapacityInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedCSIStorageCapacity. It errors when
// there is a mismatch.
func (w *wrappedCSIStorageCapacity) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements CSIStorageCapacityInterface.
func (w *wrappedCSIStorageCapacity) Get(ctx context.Context, name string, opts metav1.GetOptions) (*storageapiv1alpha1.CSIStorageCapacity, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements CSIStorageCapacityInterface.
func (w *wrappedCSIStorageCapacity) List(ctx context.Context, opts metav1.ListOptions) (*storageapiv1alpha1.CSIStorageCapacityList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements CSIStorageCapacityInterface.
func (w *wrappedCSIStorageCapacity) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements CSIStorageCapacityInterface.
func (w *wrappedCSIStorageCapacity) Create(ctx context.Context, cSIStorageCapacity *storageapiv1alpha1.CSIStorageCapacity, opts metav1.CreateOptions) (*storageapiv1alpha1.CSIStorageCapacity, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, cSIStorageCapacity, opts)
}

// Update implements CSIStorageCapacityInterface.
func (w *wrappedCSIStorageCapacity) Update(ctx context.Context, cSIStorageCapacity *storageapiv1alpha1.CSIStorageCapacity, opts metav1.UpdateOptions) (*storageapiv1alpha1.CSIStorageCapacity, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, cSIStorageCapacity, opts)
}

// Delete implements CSIStorageCapacityInterface.
func (w *wrappedCSIStorageCapacity) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements CSIStorageCapacityInterface.
func (w *wrappedCSIStorageCapacity) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements CSIStorageCapacityInterface.
func (w *wrappedCSIStorageCapacity) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *storageapiv1alpha1.CSIStorageCapacity, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements CSIStorageCapacityInterface.
func (w *wrappedCSIStorageCapacity) Apply(ctx context.Context, cSIStorageCapacity *storageapplyv1alpha1.CSIStorageCapacityApplyConfiguration, opts metav1.ApplyOptions) (result *storageapiv1alpha1.CSIStorageCapacity, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, cSIStorageCapacity, opts)
}

// WrappedStorageV1alpha1 contains the wrapped logical cluster and interface.
func (w *WrappedStorageV1alpha1) VolumeAttachments() storagev1alpha1.VolumeAttachmentInterface {
	return &wrappedVolumeAttachment{
		cluster:  w.cluster,
		delegate: w.delegate.VolumeAttachments(),
	}
}

type wrappedVolumeAttachment struct {
	cluster  logicalcluster.Name
	delegate storagev1alpha1.VolumeAttachmentInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedVolumeAttachment. It errors when
// there is a mismatch.
func (w *wrappedVolumeAttachment) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Get(ctx context.Context, name string, opts metav1.GetOptions) (*storageapiv1alpha1.VolumeAttachment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) List(ctx context.Context, opts metav1.ListOptions) (*storageapiv1alpha1.VolumeAttachmentList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Create(ctx context.Context, volumeAttachment *storageapiv1alpha1.VolumeAttachment, opts metav1.CreateOptions) (*storageapiv1alpha1.VolumeAttachment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, volumeAttachment, opts)
}

// Update implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Update(ctx context.Context, volumeAttachment *storageapiv1alpha1.VolumeAttachment, opts metav1.UpdateOptions) (*storageapiv1alpha1.VolumeAttachment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, volumeAttachment, opts)
}

// UpdateStatus implements VolumeAttachmentInterface. It was generated because the type contains a Status member.
func (w *wrappedVolumeAttachment) UpdateStatus(ctx context.Context, volumeAttachment *storageapiv1alpha1.VolumeAttachment, opts metav1.UpdateOptions) (*storageapiv1alpha1.VolumeAttachment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, volumeAttachment, opts)
}

// Delete implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *storageapiv1alpha1.VolumeAttachment, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) Apply(ctx context.Context, volumeAttachment *storageapplyv1alpha1.VolumeAttachmentApplyConfiguration, opts metav1.ApplyOptions) (result *storageapiv1alpha1.VolumeAttachment, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, volumeAttachment, opts)
}

// ApplyStatus implements VolumeAttachmentInterface.
func (w *wrappedVolumeAttachment) ApplyStatus(ctx context.Context, volumeAttachment *storageapplyv1alpha1.VolumeAttachmentApplyConfiguration, opts metav1.ApplyOptions) (result *storageapiv1alpha1.VolumeAttachment, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, volumeAttachment, opts)
}
