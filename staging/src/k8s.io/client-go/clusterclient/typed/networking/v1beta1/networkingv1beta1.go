//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	networkingapiv1beta1 "k8s.io/api/networking/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	networkingapplyv1beta1 "k8s.io/client-go/applyconfigurations/networking/v1beta1"
	networkingv1beta1 "k8s.io/client-go/kubernetes/typed/networking/v1beta1"
	"k8s.io/client-go/rest"
)

// WrappedNetworkingV1beta1 wraps the client interface with a
// logical cluster.
type WrappedNetworkingV1beta1 struct {
	cluster  logicalcluster.Name
	delegate networkingv1beta1.NetworkingV1beta1Interface
}

// New creates a WrappedNetworkingV1beta1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate networkingv1beta1.NetworkingV1beta1Interface) *WrappedNetworkingV1beta1 {
	return &WrappedNetworkingV1beta1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedNetworkingV1beta1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedNetworkingV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedNetworkingV1beta1) Ingresses(namespace string) networkingv1beta1.IngressInterface {
	return &wrappedIngress{
		cluster:  w.cluster,
		delegate: w.delegate.Ingresses(namespace),
	}
}

type wrappedIngress struct {
	cluster  logicalcluster.Name
	delegate networkingv1beta1.IngressInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedIngress. It errors when
// there is a mismatch.
func (w *wrappedIngress) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements IngressInterface.
func (w *wrappedIngress) Get(ctx context.Context, name string, opts metav1.GetOptions) (*networkingapiv1beta1.Ingress, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements IngressInterface.
func (w *wrappedIngress) List(ctx context.Context, opts metav1.ListOptions) (*networkingapiv1beta1.IngressList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements IngressInterface.
func (w *wrappedIngress) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements IngressInterface.
func (w *wrappedIngress) Create(ctx context.Context, ingress *networkingapiv1beta1.Ingress, opts metav1.CreateOptions) (*networkingapiv1beta1.Ingress, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, ingress, opts)
}

// Update implements IngressInterface.
func (w *wrappedIngress) Update(ctx context.Context, ingress *networkingapiv1beta1.Ingress, opts metav1.UpdateOptions) (*networkingapiv1beta1.Ingress, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, ingress, opts)
}

// UpdateStatus implements IngressInterface. It was generated because the type contains a Status member.
func (w *wrappedIngress) UpdateStatus(ctx context.Context, ingress *networkingapiv1beta1.Ingress, opts metav1.UpdateOptions) (*networkingapiv1beta1.Ingress, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, ingress, opts)
}

// Delete implements IngressInterface.
func (w *wrappedIngress) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements IngressInterface.
func (w *wrappedIngress) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements IngressInterface.
func (w *wrappedIngress) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *networkingapiv1beta1.Ingress, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements IngressInterface.
func (w *wrappedIngress) Apply(ctx context.Context, ingress *networkingapplyv1beta1.IngressApplyConfiguration, opts metav1.ApplyOptions) (result *networkingapiv1beta1.Ingress, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, ingress, opts)
}

// ApplyStatus implements IngressInterface.
func (w *wrappedIngress) ApplyStatus(ctx context.Context, ingress *networkingapplyv1beta1.IngressApplyConfiguration, opts metav1.ApplyOptions) (result *networkingapiv1beta1.Ingress, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, ingress, opts)
}

// WrappedNetworkingV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedNetworkingV1beta1) IngressClasses() networkingv1beta1.IngressClassInterface {
	return &wrappedIngressClass{
		cluster:  w.cluster,
		delegate: w.delegate.IngressClasses(),
	}
}

type wrappedIngressClass struct {
	cluster  logicalcluster.Name
	delegate networkingv1beta1.IngressClassInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedIngressClass. It errors when
// there is a mismatch.
func (w *wrappedIngressClass) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements IngressClassInterface.
func (w *wrappedIngressClass) Get(ctx context.Context, name string, opts metav1.GetOptions) (*networkingapiv1beta1.IngressClass, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements IngressClassInterface.
func (w *wrappedIngressClass) List(ctx context.Context, opts metav1.ListOptions) (*networkingapiv1beta1.IngressClassList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements IngressClassInterface.
func (w *wrappedIngressClass) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements IngressClassInterface.
func (w *wrappedIngressClass) Create(ctx context.Context, ingressClass *networkingapiv1beta1.IngressClass, opts metav1.CreateOptions) (*networkingapiv1beta1.IngressClass, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, ingressClass, opts)
}

// Update implements IngressClassInterface.
func (w *wrappedIngressClass) Update(ctx context.Context, ingressClass *networkingapiv1beta1.IngressClass, opts metav1.UpdateOptions) (*networkingapiv1beta1.IngressClass, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, ingressClass, opts)
}

// Delete implements IngressClassInterface.
func (w *wrappedIngressClass) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements IngressClassInterface.
func (w *wrappedIngressClass) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements IngressClassInterface.
func (w *wrappedIngressClass) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *networkingapiv1beta1.IngressClass, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements IngressClassInterface.
func (w *wrappedIngressClass) Apply(ctx context.Context, ingressClass *networkingapplyv1beta1.IngressClassApplyConfiguration, opts metav1.ApplyOptions) (result *networkingapiv1beta1.IngressClass, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, ingressClass, opts)
}
