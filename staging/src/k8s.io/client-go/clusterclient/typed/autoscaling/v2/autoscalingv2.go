//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v2

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	autoscalingapiv2 "k8s.io/api/autoscaling/v2"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	autoscalingapplyv2 "k8s.io/client-go/applyconfigurations/autoscaling/v2"
	autoscalingv2 "k8s.io/client-go/kubernetes/typed/autoscaling/v2"
	"k8s.io/client-go/rest"
)

// WrappedAutoscalingV2 wraps the client interface with a
// logical cluster.
type WrappedAutoscalingV2 struct {
	cluster  logicalcluster.Name
	delegate autoscalingv2.AutoscalingV2Interface
}

// New creates a WrappedAutoscalingV2 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate autoscalingv2.AutoscalingV2Interface) *WrappedAutoscalingV2 {
	return &WrappedAutoscalingV2{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedAutoscalingV2) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedAutoscalingV2 contains the wrapped logical cluster and interface.
func (w *WrappedAutoscalingV2) HorizontalPodAutoscalers(namespace string) autoscalingv2.HorizontalPodAutoscalerInterface {
	return &wrappedHorizontalPodAutoscaler{
		cluster:  w.cluster,
		delegate: w.delegate.HorizontalPodAutoscalers(namespace),
	}
}

type wrappedHorizontalPodAutoscaler struct {
	cluster  logicalcluster.Name
	delegate autoscalingv2.HorizontalPodAutoscalerInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedHorizontalPodAutoscaler. It errors when
// there is a mismatch.
func (w *wrappedHorizontalPodAutoscaler) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements HorizontalPodAutoscalerInterface.
func (w *wrappedHorizontalPodAutoscaler) Get(ctx context.Context, name string, opts metav1.GetOptions) (*autoscalingapiv2.HorizontalPodAutoscaler, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements HorizontalPodAutoscalerInterface.
func (w *wrappedHorizontalPodAutoscaler) List(ctx context.Context, opts metav1.ListOptions) (*autoscalingapiv2.HorizontalPodAutoscalerList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements HorizontalPodAutoscalerInterface.
func (w *wrappedHorizontalPodAutoscaler) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements HorizontalPodAutoscalerInterface.
func (w *wrappedHorizontalPodAutoscaler) Create(ctx context.Context, horizontalPodAutoscaler *autoscalingapiv2.HorizontalPodAutoscaler, opts metav1.CreateOptions) (*autoscalingapiv2.HorizontalPodAutoscaler, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, horizontalPodAutoscaler, opts)
}

// Update implements HorizontalPodAutoscalerInterface.
func (w *wrappedHorizontalPodAutoscaler) Update(ctx context.Context, horizontalPodAutoscaler *autoscalingapiv2.HorizontalPodAutoscaler, opts metav1.UpdateOptions) (*autoscalingapiv2.HorizontalPodAutoscaler, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, horizontalPodAutoscaler, opts)
}

// UpdateStatus implements HorizontalPodAutoscalerInterface. It was generated because the type contains a Status member.
func (w *wrappedHorizontalPodAutoscaler) UpdateStatus(ctx context.Context, horizontalPodAutoscaler *autoscalingapiv2.HorizontalPodAutoscaler, opts metav1.UpdateOptions) (*autoscalingapiv2.HorizontalPodAutoscaler, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, horizontalPodAutoscaler, opts)
}

// Delete implements HorizontalPodAutoscalerInterface.
func (w *wrappedHorizontalPodAutoscaler) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements HorizontalPodAutoscalerInterface.
func (w *wrappedHorizontalPodAutoscaler) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements HorizontalPodAutoscalerInterface.
func (w *wrappedHorizontalPodAutoscaler) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *autoscalingapiv2.HorizontalPodAutoscaler, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements HorizontalPodAutoscalerInterface.
func (w *wrappedHorizontalPodAutoscaler) Apply(ctx context.Context, horizontalPodAutoscaler *autoscalingapplyv2.HorizontalPodAutoscalerApplyConfiguration, opts metav1.ApplyOptions) (result *autoscalingapiv2.HorizontalPodAutoscaler, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, horizontalPodAutoscaler, opts)
}

// ApplyStatus implements HorizontalPodAutoscalerInterface.
func (w *wrappedHorizontalPodAutoscaler) ApplyStatus(ctx context.Context, horizontalPodAutoscaler *autoscalingapplyv2.HorizontalPodAutoscalerApplyConfiguration, opts metav1.ApplyOptions) (result *autoscalingapiv2.HorizontalPodAutoscaler, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, horizontalPodAutoscaler, opts)
}
