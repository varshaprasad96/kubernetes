//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	admissionregistrationapiv1beta1 "k8s.io/api/admissionregistration/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	admissionregistrationapplyv1beta1 "k8s.io/client-go/applyconfigurations/admissionregistration/v1beta1"
	admissionregistrationv1beta1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1beta1"
	"k8s.io/client-go/rest"
)

// WrappedAdmissionregistrationV1beta1 wraps the client interface with a
// logical cluster.
type WrappedAdmissionregistrationV1beta1 struct {
	cluster  logicalcluster.Name
	delegate admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface
}

// New creates a WrappedAdmissionregistrationV1beta1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface) *WrappedAdmissionregistrationV1beta1 {
	return &WrappedAdmissionregistrationV1beta1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedAdmissionregistrationV1beta1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedAdmissionregistrationV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedAdmissionregistrationV1beta1) MutatingWebhookConfigurations() admissionregistrationv1beta1.MutatingWebhookConfigurationInterface {
	return &wrappedMutatingWebhookConfiguration{
		cluster:  w.cluster,
		delegate: w.delegate.MutatingWebhookConfigurations(),
	}
}

type wrappedMutatingWebhookConfiguration struct {
	cluster  logicalcluster.Name
	delegate admissionregistrationv1beta1.MutatingWebhookConfigurationInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedMutatingWebhookConfiguration. It errors when
// there is a mismatch.
func (w *wrappedMutatingWebhookConfiguration) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements MutatingWebhookConfigurationInterface.
func (w *wrappedMutatingWebhookConfiguration) Get(ctx context.Context, name string, opts metav1.GetOptions) (*admissionregistrationapiv1beta1.MutatingWebhookConfiguration, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements MutatingWebhookConfigurationInterface.
func (w *wrappedMutatingWebhookConfiguration) List(ctx context.Context, opts metav1.ListOptions) (*admissionregistrationapiv1beta1.MutatingWebhookConfigurationList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements MutatingWebhookConfigurationInterface.
func (w *wrappedMutatingWebhookConfiguration) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements MutatingWebhookConfigurationInterface.
func (w *wrappedMutatingWebhookConfiguration) Create(ctx context.Context, mutatingWebhookConfiguration *admissionregistrationapiv1beta1.MutatingWebhookConfiguration, opts metav1.CreateOptions) (*admissionregistrationapiv1beta1.MutatingWebhookConfiguration, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, mutatingWebhookConfiguration, opts)
}

// Update implements MutatingWebhookConfigurationInterface.
func (w *wrappedMutatingWebhookConfiguration) Update(ctx context.Context, mutatingWebhookConfiguration *admissionregistrationapiv1beta1.MutatingWebhookConfiguration, opts metav1.UpdateOptions) (*admissionregistrationapiv1beta1.MutatingWebhookConfiguration, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, mutatingWebhookConfiguration, opts)
}

// Delete implements MutatingWebhookConfigurationInterface.
func (w *wrappedMutatingWebhookConfiguration) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements MutatingWebhookConfigurationInterface.
func (w *wrappedMutatingWebhookConfiguration) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements MutatingWebhookConfigurationInterface.
func (w *wrappedMutatingWebhookConfiguration) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *admissionregistrationapiv1beta1.MutatingWebhookConfiguration, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements MutatingWebhookConfigurationInterface.
func (w *wrappedMutatingWebhookConfiguration) Apply(ctx context.Context, mutatingWebhookConfiguration *admissionregistrationapplyv1beta1.MutatingWebhookConfigurationApplyConfiguration, opts metav1.ApplyOptions) (result *admissionregistrationapiv1beta1.MutatingWebhookConfiguration, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, mutatingWebhookConfiguration, opts)
}

// WrappedAdmissionregistrationV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedAdmissionregistrationV1beta1) ValidatingWebhookConfigurations() admissionregistrationv1beta1.ValidatingWebhookConfigurationInterface {
	return &wrappedValidatingWebhookConfiguration{
		cluster:  w.cluster,
		delegate: w.delegate.ValidatingWebhookConfigurations(),
	}
}

type wrappedValidatingWebhookConfiguration struct {
	cluster  logicalcluster.Name
	delegate admissionregistrationv1beta1.ValidatingWebhookConfigurationInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedValidatingWebhookConfiguration. It errors when
// there is a mismatch.
func (w *wrappedValidatingWebhookConfiguration) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements ValidatingWebhookConfigurationInterface.
func (w *wrappedValidatingWebhookConfiguration) Get(ctx context.Context, name string, opts metav1.GetOptions) (*admissionregistrationapiv1beta1.ValidatingWebhookConfiguration, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements ValidatingWebhookConfigurationInterface.
func (w *wrappedValidatingWebhookConfiguration) List(ctx context.Context, opts metav1.ListOptions) (*admissionregistrationapiv1beta1.ValidatingWebhookConfigurationList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements ValidatingWebhookConfigurationInterface.
func (w *wrappedValidatingWebhookConfiguration) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements ValidatingWebhookConfigurationInterface.
func (w *wrappedValidatingWebhookConfiguration) Create(ctx context.Context, validatingWebhookConfiguration *admissionregistrationapiv1beta1.ValidatingWebhookConfiguration, opts metav1.CreateOptions) (*admissionregistrationapiv1beta1.ValidatingWebhookConfiguration, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, validatingWebhookConfiguration, opts)
}

// Update implements ValidatingWebhookConfigurationInterface.
func (w *wrappedValidatingWebhookConfiguration) Update(ctx context.Context, validatingWebhookConfiguration *admissionregistrationapiv1beta1.ValidatingWebhookConfiguration, opts metav1.UpdateOptions) (*admissionregistrationapiv1beta1.ValidatingWebhookConfiguration, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, validatingWebhookConfiguration, opts)
}

// Delete implements ValidatingWebhookConfigurationInterface.
func (w *wrappedValidatingWebhookConfiguration) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements ValidatingWebhookConfigurationInterface.
func (w *wrappedValidatingWebhookConfiguration) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements ValidatingWebhookConfigurationInterface.
func (w *wrappedValidatingWebhookConfiguration) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *admissionregistrationapiv1beta1.ValidatingWebhookConfiguration, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements ValidatingWebhookConfigurationInterface.
func (w *wrappedValidatingWebhookConfiguration) Apply(ctx context.Context, validatingWebhookConfiguration *admissionregistrationapplyv1beta1.ValidatingWebhookConfigurationApplyConfiguration, opts metav1.ApplyOptions) (result *admissionregistrationapiv1beta1.ValidatingWebhookConfiguration, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, validatingWebhookConfiguration, opts)
}
