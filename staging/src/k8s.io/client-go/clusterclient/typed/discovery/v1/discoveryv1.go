//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	discoveryapiv1 "k8s.io/api/discovery/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	discoveryapplyv1 "k8s.io/client-go/applyconfigurations/discovery/v1"
	discoveryv1 "k8s.io/client-go/kubernetes/typed/discovery/v1"
	"k8s.io/client-go/rest"
)

// WrappedDiscoveryV1 wraps the client interface with a
// logical cluster.
type WrappedDiscoveryV1 struct {
	cluster  logicalcluster.Name
	delegate discoveryv1.DiscoveryV1Interface
}

// New creates a WrappedDiscoveryV1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate discoveryv1.DiscoveryV1Interface) *WrappedDiscoveryV1 {
	return &WrappedDiscoveryV1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedDiscoveryV1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedDiscoveryV1 contains the wrapped logical cluster and interface.
func (w *WrappedDiscoveryV1) EndpointSlices(namespace string) discoveryv1.EndpointSliceInterface {
	return &wrappedEndpointSlice{
		cluster:  w.cluster,
		delegate: w.delegate.EndpointSlices(namespace),
	}
}

type wrappedEndpointSlice struct {
	cluster  logicalcluster.Name
	delegate discoveryv1.EndpointSliceInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedEndpointSlice. It errors when
// there is a mismatch.
func (w *wrappedEndpointSlice) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements EndpointSliceInterface.
func (w *wrappedEndpointSlice) Get(ctx context.Context, name string, opts metav1.GetOptions) (*discoveryapiv1.EndpointSlice, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements EndpointSliceInterface.
func (w *wrappedEndpointSlice) List(ctx context.Context, opts metav1.ListOptions) (*discoveryapiv1.EndpointSliceList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements EndpointSliceInterface.
func (w *wrappedEndpointSlice) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements EndpointSliceInterface.
func (w *wrappedEndpointSlice) Create(ctx context.Context, endpointSlice *discoveryapiv1.EndpointSlice, opts metav1.CreateOptions) (*discoveryapiv1.EndpointSlice, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, endpointSlice, opts)
}

// Update implements EndpointSliceInterface.
func (w *wrappedEndpointSlice) Update(ctx context.Context, endpointSlice *discoveryapiv1.EndpointSlice, opts metav1.UpdateOptions) (*discoveryapiv1.EndpointSlice, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, endpointSlice, opts)
}

// Delete implements EndpointSliceInterface.
func (w *wrappedEndpointSlice) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements EndpointSliceInterface.
func (w *wrappedEndpointSlice) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements EndpointSliceInterface.
func (w *wrappedEndpointSlice) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *discoveryapiv1.EndpointSlice, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements EndpointSliceInterface.
func (w *wrappedEndpointSlice) Apply(ctx context.Context, endpointSlice *discoveryapplyv1.EndpointSliceApplyConfiguration, opts metav1.ApplyOptions) (result *discoveryapiv1.EndpointSlice, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, endpointSlice, opts)
}
