//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	authorizationapiv1 "k8s.io/api/authorization/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	authorizationv1 "k8s.io/client-go/kubernetes/typed/authorization/v1"
	"k8s.io/client-go/rest"
)

// WrappedAuthorizationV1 wraps the client interface with a
// logical cluster.
type WrappedAuthorizationV1 struct {
	cluster  logicalcluster.Name
	delegate authorizationv1.AuthorizationV1Interface
}

// New creates a WrappedAuthorizationV1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate authorizationv1.AuthorizationV1Interface) *WrappedAuthorizationV1 {
	return &WrappedAuthorizationV1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedAuthorizationV1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedAuthorizationV1 contains the wrapped logical cluster and interface.
func (w *WrappedAuthorizationV1) LocalSubjectAccessReviews(namespace string) authorizationv1.LocalSubjectAccessReviewInterface {
	return &wrappedLocalSubjectAccessReview{
		cluster:  w.cluster,
		delegate: w.delegate.LocalSubjectAccessReviews(namespace),
	}
}

type wrappedLocalSubjectAccessReview struct {
	cluster  logicalcluster.Name
	delegate authorizationv1.LocalSubjectAccessReviewInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedLocalSubjectAccessReview. It errors when
// there is a mismatch.
func (w *wrappedLocalSubjectAccessReview) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Create implements LocalSubjectAccessReviewInterface.
func (w *wrappedLocalSubjectAccessReview) Create(ctx context.Context, localSubjectAccessReview *authorizationapiv1.LocalSubjectAccessReview, opts metav1.CreateOptions) (*authorizationapiv1.LocalSubjectAccessReview, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, localSubjectAccessReview, opts)
}

// WrappedAuthorizationV1 contains the wrapped logical cluster and interface.
func (w *WrappedAuthorizationV1) SelfSubjectAccessReviews() authorizationv1.SelfSubjectAccessReviewInterface {
	return &wrappedSelfSubjectAccessReview{
		cluster:  w.cluster,
		delegate: w.delegate.SelfSubjectAccessReviews(),
	}
}

type wrappedSelfSubjectAccessReview struct {
	cluster  logicalcluster.Name
	delegate authorizationv1.SelfSubjectAccessReviewInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedSelfSubjectAccessReview. It errors when
// there is a mismatch.
func (w *wrappedSelfSubjectAccessReview) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Create implements SelfSubjectAccessReviewInterface.
func (w *wrappedSelfSubjectAccessReview) Create(ctx context.Context, selfSubjectAccessReview *authorizationapiv1.SelfSubjectAccessReview, opts metav1.CreateOptions) (*authorizationapiv1.SelfSubjectAccessReview, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, selfSubjectAccessReview, opts)
}

// WrappedAuthorizationV1 contains the wrapped logical cluster and interface.
func (w *WrappedAuthorizationV1) SelfSubjectRulesReviews() authorizationv1.SelfSubjectRulesReviewInterface {
	return &wrappedSelfSubjectRulesReview{
		cluster:  w.cluster,
		delegate: w.delegate.SelfSubjectRulesReviews(),
	}
}

type wrappedSelfSubjectRulesReview struct {
	cluster  logicalcluster.Name
	delegate authorizationv1.SelfSubjectRulesReviewInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedSelfSubjectRulesReview. It errors when
// there is a mismatch.
func (w *wrappedSelfSubjectRulesReview) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Create implements SelfSubjectRulesReviewInterface.
func (w *wrappedSelfSubjectRulesReview) Create(ctx context.Context, selfSubjectRulesReview *authorizationapiv1.SelfSubjectRulesReview, opts metav1.CreateOptions) (*authorizationapiv1.SelfSubjectRulesReview, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, selfSubjectRulesReview, opts)
}

// WrappedAuthorizationV1 contains the wrapped logical cluster and interface.
func (w *WrappedAuthorizationV1) SubjectAccessReviews() authorizationv1.SubjectAccessReviewInterface {
	return &wrappedSubjectAccessReview{
		cluster:  w.cluster,
		delegate: w.delegate.SubjectAccessReviews(),
	}
}

type wrappedSubjectAccessReview struct {
	cluster  logicalcluster.Name
	delegate authorizationv1.SubjectAccessReviewInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedSubjectAccessReview. It errors when
// there is a mismatch.
func (w *wrappedSubjectAccessReview) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Create implements SubjectAccessReviewInterface.
func (w *wrappedSubjectAccessReview) Create(ctx context.Context, subjectAccessReview *authorizationapiv1.SubjectAccessReview, opts metav1.CreateOptions) (*authorizationapiv1.SubjectAccessReview, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, subjectAccessReview, opts)
}
