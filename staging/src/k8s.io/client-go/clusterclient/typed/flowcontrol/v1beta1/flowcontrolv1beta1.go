//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	flowcontrolapiv1beta1 "k8s.io/api/flowcontrol/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	flowcontrolapplyv1beta1 "k8s.io/client-go/applyconfigurations/flowcontrol/v1beta1"
	flowcontrolv1beta1 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta1"
	"k8s.io/client-go/rest"
)

// WrappedFlowcontrolV1beta1 wraps the client interface with a
// logical cluster.
type WrappedFlowcontrolV1beta1 struct {
	cluster  logicalcluster.Name
	delegate flowcontrolv1beta1.FlowcontrolV1beta1Interface
}

// New creates a WrappedFlowcontrolV1beta1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate flowcontrolv1beta1.FlowcontrolV1beta1Interface) *WrappedFlowcontrolV1beta1 {
	return &WrappedFlowcontrolV1beta1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedFlowcontrolV1beta1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedFlowcontrolV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedFlowcontrolV1beta1) FlowSchemas() flowcontrolv1beta1.FlowSchemaInterface {
	return &wrappedFlowSchema{
		cluster:  w.cluster,
		delegate: w.delegate.FlowSchemas(),
	}
}

type wrappedFlowSchema struct {
	cluster  logicalcluster.Name
	delegate flowcontrolv1beta1.FlowSchemaInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedFlowSchema. It errors when
// there is a mismatch.
func (w *wrappedFlowSchema) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements FlowSchemaInterface.
func (w *wrappedFlowSchema) Get(ctx context.Context, name string, opts metav1.GetOptions) (*flowcontrolapiv1beta1.FlowSchema, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements FlowSchemaInterface.
func (w *wrappedFlowSchema) List(ctx context.Context, opts metav1.ListOptions) (*flowcontrolapiv1beta1.FlowSchemaList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements FlowSchemaInterface.
func (w *wrappedFlowSchema) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements FlowSchemaInterface.
func (w *wrappedFlowSchema) Create(ctx context.Context, flowSchema *flowcontrolapiv1beta1.FlowSchema, opts metav1.CreateOptions) (*flowcontrolapiv1beta1.FlowSchema, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, flowSchema, opts)
}

// Update implements FlowSchemaInterface.
func (w *wrappedFlowSchema) Update(ctx context.Context, flowSchema *flowcontrolapiv1beta1.FlowSchema, opts metav1.UpdateOptions) (*flowcontrolapiv1beta1.FlowSchema, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, flowSchema, opts)
}

// UpdateStatus implements FlowSchemaInterface. It was generated because the type contains a Status member.
func (w *wrappedFlowSchema) UpdateStatus(ctx context.Context, flowSchema *flowcontrolapiv1beta1.FlowSchema, opts metav1.UpdateOptions) (*flowcontrolapiv1beta1.FlowSchema, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, flowSchema, opts)
}

// Delete implements FlowSchemaInterface.
func (w *wrappedFlowSchema) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements FlowSchemaInterface.
func (w *wrappedFlowSchema) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements FlowSchemaInterface.
func (w *wrappedFlowSchema) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *flowcontrolapiv1beta1.FlowSchema, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements FlowSchemaInterface.
func (w *wrappedFlowSchema) Apply(ctx context.Context, flowSchema *flowcontrolapplyv1beta1.FlowSchemaApplyConfiguration, opts metav1.ApplyOptions) (result *flowcontrolapiv1beta1.FlowSchema, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, flowSchema, opts)
}

// ApplyStatus implements FlowSchemaInterface.
func (w *wrappedFlowSchema) ApplyStatus(ctx context.Context, flowSchema *flowcontrolapplyv1beta1.FlowSchemaApplyConfiguration, opts metav1.ApplyOptions) (result *flowcontrolapiv1beta1.FlowSchema, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, flowSchema, opts)
}

// WrappedFlowcontrolV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedFlowcontrolV1beta1) PriorityLevelConfigurations() flowcontrolv1beta1.PriorityLevelConfigurationInterface {
	return &wrappedPriorityLevelConfiguration{
		cluster:  w.cluster,
		delegate: w.delegate.PriorityLevelConfigurations(),
	}
}

type wrappedPriorityLevelConfiguration struct {
	cluster  logicalcluster.Name
	delegate flowcontrolv1beta1.PriorityLevelConfigurationInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedPriorityLevelConfiguration. It errors when
// there is a mismatch.
func (w *wrappedPriorityLevelConfiguration) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements PriorityLevelConfigurationInterface.
func (w *wrappedPriorityLevelConfiguration) Get(ctx context.Context, name string, opts metav1.GetOptions) (*flowcontrolapiv1beta1.PriorityLevelConfiguration, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements PriorityLevelConfigurationInterface.
func (w *wrappedPriorityLevelConfiguration) List(ctx context.Context, opts metav1.ListOptions) (*flowcontrolapiv1beta1.PriorityLevelConfigurationList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements PriorityLevelConfigurationInterface.
func (w *wrappedPriorityLevelConfiguration) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements PriorityLevelConfigurationInterface.
func (w *wrappedPriorityLevelConfiguration) Create(ctx context.Context, priorityLevelConfiguration *flowcontrolapiv1beta1.PriorityLevelConfiguration, opts metav1.CreateOptions) (*flowcontrolapiv1beta1.PriorityLevelConfiguration, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, priorityLevelConfiguration, opts)
}

// Update implements PriorityLevelConfigurationInterface.
func (w *wrappedPriorityLevelConfiguration) Update(ctx context.Context, priorityLevelConfiguration *flowcontrolapiv1beta1.PriorityLevelConfiguration, opts metav1.UpdateOptions) (*flowcontrolapiv1beta1.PriorityLevelConfiguration, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, priorityLevelConfiguration, opts)
}

// UpdateStatus implements PriorityLevelConfigurationInterface. It was generated because the type contains a Status member.
func (w *wrappedPriorityLevelConfiguration) UpdateStatus(ctx context.Context, priorityLevelConfiguration *flowcontrolapiv1beta1.PriorityLevelConfiguration, opts metav1.UpdateOptions) (*flowcontrolapiv1beta1.PriorityLevelConfiguration, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, priorityLevelConfiguration, opts)
}

// Delete implements PriorityLevelConfigurationInterface.
func (w *wrappedPriorityLevelConfiguration) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements PriorityLevelConfigurationInterface.
func (w *wrappedPriorityLevelConfiguration) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements PriorityLevelConfigurationInterface.
func (w *wrappedPriorityLevelConfiguration) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *flowcontrolapiv1beta1.PriorityLevelConfiguration, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements PriorityLevelConfigurationInterface.
func (w *wrappedPriorityLevelConfiguration) Apply(ctx context.Context, priorityLevelConfiguration *flowcontrolapplyv1beta1.PriorityLevelConfigurationApplyConfiguration, opts metav1.ApplyOptions) (result *flowcontrolapiv1beta1.PriorityLevelConfiguration, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, priorityLevelConfiguration, opts)
}

// ApplyStatus implements PriorityLevelConfigurationInterface.
func (w *wrappedPriorityLevelConfiguration) ApplyStatus(ctx context.Context, priorityLevelConfiguration *flowcontrolapplyv1beta1.PriorityLevelConfigurationApplyConfiguration, opts metav1.ApplyOptions) (result *flowcontrolapiv1beta1.PriorityLevelConfiguration, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, priorityLevelConfiguration, opts)
}
