//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	schedulingapiv1 "k8s.io/api/scheduling/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	schedulingapplyv1 "k8s.io/client-go/applyconfigurations/scheduling/v1"
	schedulingv1 "k8s.io/client-go/kubernetes/typed/scheduling/v1"
	"k8s.io/client-go/rest"
)

// WrappedSchedulingV1 wraps the client interface with a
// logical cluster.
type WrappedSchedulingV1 struct {
	cluster  logicalcluster.Name
	delegate schedulingv1.SchedulingV1Interface
}

// New creates a WrappedSchedulingV1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate schedulingv1.SchedulingV1Interface) *WrappedSchedulingV1 {
	return &WrappedSchedulingV1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedSchedulingV1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedSchedulingV1 contains the wrapped logical cluster and interface.
func (w *WrappedSchedulingV1) PriorityClasses() schedulingv1.PriorityClassInterface {
	return &wrappedPriorityClass{
		cluster:  w.cluster,
		delegate: w.delegate.PriorityClasses(),
	}
}

type wrappedPriorityClass struct {
	cluster  logicalcluster.Name
	delegate schedulingv1.PriorityClassInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedPriorityClass. It errors when
// there is a mismatch.
func (w *wrappedPriorityClass) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements PriorityClassInterface.
func (w *wrappedPriorityClass) Get(ctx context.Context, name string, opts metav1.GetOptions) (*schedulingapiv1.PriorityClass, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements PriorityClassInterface.
func (w *wrappedPriorityClass) List(ctx context.Context, opts metav1.ListOptions) (*schedulingapiv1.PriorityClassList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements PriorityClassInterface.
func (w *wrappedPriorityClass) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements PriorityClassInterface.
func (w *wrappedPriorityClass) Create(ctx context.Context, priorityClass *schedulingapiv1.PriorityClass, opts metav1.CreateOptions) (*schedulingapiv1.PriorityClass, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, priorityClass, opts)
}

// Update implements PriorityClassInterface.
func (w *wrappedPriorityClass) Update(ctx context.Context, priorityClass *schedulingapiv1.PriorityClass, opts metav1.UpdateOptions) (*schedulingapiv1.PriorityClass, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, priorityClass, opts)
}

// Delete implements PriorityClassInterface.
func (w *wrappedPriorityClass) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements PriorityClassInterface.
func (w *wrappedPriorityClass) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements PriorityClassInterface.
func (w *wrappedPriorityClass) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *schedulingapiv1.PriorityClass, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements PriorityClassInterface.
func (w *wrappedPriorityClass) Apply(ctx context.Context, priorityClass *schedulingapplyv1.PriorityClassApplyConfiguration, opts metav1.ApplyOptions) (result *schedulingapiv1.PriorityClass, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, priorityClass, opts)
}
