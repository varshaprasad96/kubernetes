//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	extensionsapiv1beta1 "k8s.io/api/extensions/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	extensionsapplyv1beta1 "k8s.io/client-go/applyconfigurations/extensions/v1beta1"
	extensionsv1beta1 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"
	"k8s.io/client-go/rest"
)

// WrappedExtensionsV1beta1 wraps the client interface with a
// logical cluster.
type WrappedExtensionsV1beta1 struct {
	cluster  logicalcluster.Name
	delegate extensionsv1beta1.ExtensionsV1beta1Interface
}

// New creates a WrappedExtensionsV1beta1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate extensionsv1beta1.ExtensionsV1beta1Interface) *WrappedExtensionsV1beta1 {
	return &WrappedExtensionsV1beta1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedExtensionsV1beta1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedExtensionsV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedExtensionsV1beta1) DaemonSets(namespace string) extensionsv1beta1.DaemonSetInterface {
	return &wrappedDaemonSet{
		cluster:  w.cluster,
		delegate: w.delegate.DaemonSets(namespace),
	}
}

type wrappedDaemonSet struct {
	cluster  logicalcluster.Name
	delegate extensionsv1beta1.DaemonSetInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedDaemonSet. It errors when
// there is a mismatch.
func (w *wrappedDaemonSet) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements DaemonSetInterface.
func (w *wrappedDaemonSet) Get(ctx context.Context, name string, opts metav1.GetOptions) (*extensionsapiv1beta1.DaemonSet, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements DaemonSetInterface.
func (w *wrappedDaemonSet) List(ctx context.Context, opts metav1.ListOptions) (*extensionsapiv1beta1.DaemonSetList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements DaemonSetInterface.
func (w *wrappedDaemonSet) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements DaemonSetInterface.
func (w *wrappedDaemonSet) Create(ctx context.Context, daemonSet *extensionsapiv1beta1.DaemonSet, opts metav1.CreateOptions) (*extensionsapiv1beta1.DaemonSet, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, daemonSet, opts)
}

// Update implements DaemonSetInterface.
func (w *wrappedDaemonSet) Update(ctx context.Context, daemonSet *extensionsapiv1beta1.DaemonSet, opts metav1.UpdateOptions) (*extensionsapiv1beta1.DaemonSet, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, daemonSet, opts)
}

// UpdateStatus implements DaemonSetInterface. It was generated because the type contains a Status member.
func (w *wrappedDaemonSet) UpdateStatus(ctx context.Context, daemonSet *extensionsapiv1beta1.DaemonSet, opts metav1.UpdateOptions) (*extensionsapiv1beta1.DaemonSet, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, daemonSet, opts)
}

// Delete implements DaemonSetInterface.
func (w *wrappedDaemonSet) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements DaemonSetInterface.
func (w *wrappedDaemonSet) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements DaemonSetInterface.
func (w *wrappedDaemonSet) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *extensionsapiv1beta1.DaemonSet, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements DaemonSetInterface.
func (w *wrappedDaemonSet) Apply(ctx context.Context, daemonSet *extensionsapplyv1beta1.DaemonSetApplyConfiguration, opts metav1.ApplyOptions) (result *extensionsapiv1beta1.DaemonSet, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, daemonSet, opts)
}

// ApplyStatus implements DaemonSetInterface.
func (w *wrappedDaemonSet) ApplyStatus(ctx context.Context, daemonSet *extensionsapplyv1beta1.DaemonSetApplyConfiguration, opts metav1.ApplyOptions) (result *extensionsapiv1beta1.DaemonSet, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, daemonSet, opts)
}

// WrappedExtensionsV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedExtensionsV1beta1) Deployments(namespace string) extensionsv1beta1.DeploymentInterface {
	return &wrappedDeployment{
		cluster:  w.cluster,
		delegate: w.delegate.Deployments(namespace),
	}
}

type wrappedDeployment struct {
	cluster  logicalcluster.Name
	delegate extensionsv1beta1.DeploymentInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedDeployment. It errors when
// there is a mismatch.
func (w *wrappedDeployment) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements DeploymentInterface.
func (w *wrappedDeployment) Get(ctx context.Context, name string, opts metav1.GetOptions) (*extensionsapiv1beta1.Deployment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements DeploymentInterface.
func (w *wrappedDeployment) List(ctx context.Context, opts metav1.ListOptions) (*extensionsapiv1beta1.DeploymentList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements DeploymentInterface.
func (w *wrappedDeployment) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements DeploymentInterface.
func (w *wrappedDeployment) Create(ctx context.Context, deployment *extensionsapiv1beta1.Deployment, opts metav1.CreateOptions) (*extensionsapiv1beta1.Deployment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, deployment, opts)
}

// Update implements DeploymentInterface.
func (w *wrappedDeployment) Update(ctx context.Context, deployment *extensionsapiv1beta1.Deployment, opts metav1.UpdateOptions) (*extensionsapiv1beta1.Deployment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, deployment, opts)
}

// UpdateStatus implements DeploymentInterface. It was generated because the type contains a Status member.
func (w *wrappedDeployment) UpdateStatus(ctx context.Context, deployment *extensionsapiv1beta1.Deployment, opts metav1.UpdateOptions) (*extensionsapiv1beta1.Deployment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, deployment, opts)
}

// Delete implements DeploymentInterface.
func (w *wrappedDeployment) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements DeploymentInterface.
func (w *wrappedDeployment) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements DeploymentInterface.
func (w *wrappedDeployment) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *extensionsapiv1beta1.Deployment, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements DeploymentInterface.
func (w *wrappedDeployment) Apply(ctx context.Context, deployment *extensionsapplyv1beta1.DeploymentApplyConfiguration, opts metav1.ApplyOptions) (result *extensionsapiv1beta1.Deployment, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, deployment, opts)
}

// ApplyStatus implements DeploymentInterface.
func (w *wrappedDeployment) ApplyStatus(ctx context.Context, deployment *extensionsapplyv1beta1.DeploymentApplyConfiguration, opts metav1.ApplyOptions) (result *extensionsapiv1beta1.Deployment, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, deployment, opts)
}

// GetScale implements DeploymentInterface.
func (w *wrappedDeployment) GetScale(ctx context.Context, name string, opts metav1.GetOptions) (*extensionsapiv1beta1.Scale, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.GetScale(ctx, name, opts)
}

// UpdateScale implements DeploymentInterface.
func (w *wrappedDeployment) UpdateScale(ctx context.Context, name string, scale *extensionsapiv1beta1.Scale, opts metav1.UpdateOptions) (*extensionsapiv1beta1.Scale, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateScale(ctx, name, scale, opts)
}

// ApplyScale implements DeploymentInterface.
func (w *wrappedDeployment) ApplyScale(ctx context.Context, name string, scale *extensionsapplyv1beta1.ScaleApplyConfiguration, opts metav1.ApplyOptions) (result *extensionsapiv1beta1.Scale, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyScale(ctx, name, scale, opts)
}

// WrappedExtensionsV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedExtensionsV1beta1) Ingresses(namespace string) extensionsv1beta1.IngressInterface {
	return &wrappedIngress{
		cluster:  w.cluster,
		delegate: w.delegate.Ingresses(namespace),
	}
}

type wrappedIngress struct {
	cluster  logicalcluster.Name
	delegate extensionsv1beta1.IngressInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedIngress. It errors when
// there is a mismatch.
func (w *wrappedIngress) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements IngressInterface.
func (w *wrappedIngress) Get(ctx context.Context, name string, opts metav1.GetOptions) (*extensionsapiv1beta1.Ingress, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements IngressInterface.
func (w *wrappedIngress) List(ctx context.Context, opts metav1.ListOptions) (*extensionsapiv1beta1.IngressList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements IngressInterface.
func (w *wrappedIngress) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements IngressInterface.
func (w *wrappedIngress) Create(ctx context.Context, ingress *extensionsapiv1beta1.Ingress, opts metav1.CreateOptions) (*extensionsapiv1beta1.Ingress, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, ingress, opts)
}

// Update implements IngressInterface.
func (w *wrappedIngress) Update(ctx context.Context, ingress *extensionsapiv1beta1.Ingress, opts metav1.UpdateOptions) (*extensionsapiv1beta1.Ingress, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, ingress, opts)
}

// UpdateStatus implements IngressInterface. It was generated because the type contains a Status member.
func (w *wrappedIngress) UpdateStatus(ctx context.Context, ingress *extensionsapiv1beta1.Ingress, opts metav1.UpdateOptions) (*extensionsapiv1beta1.Ingress, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, ingress, opts)
}

// Delete implements IngressInterface.
func (w *wrappedIngress) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements IngressInterface.
func (w *wrappedIngress) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements IngressInterface.
func (w *wrappedIngress) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *extensionsapiv1beta1.Ingress, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements IngressInterface.
func (w *wrappedIngress) Apply(ctx context.Context, ingress *extensionsapplyv1beta1.IngressApplyConfiguration, opts metav1.ApplyOptions) (result *extensionsapiv1beta1.Ingress, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, ingress, opts)
}

// ApplyStatus implements IngressInterface.
func (w *wrappedIngress) ApplyStatus(ctx context.Context, ingress *extensionsapplyv1beta1.IngressApplyConfiguration, opts metav1.ApplyOptions) (result *extensionsapiv1beta1.Ingress, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, ingress, opts)
}

// WrappedExtensionsV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedExtensionsV1beta1) NetworkPolicies(namespace string) extensionsv1beta1.NetworkPolicyInterface {
	return &wrappedNetworkPolicy{
		cluster:  w.cluster,
		delegate: w.delegate.NetworkPolicies(namespace),
	}
}

type wrappedNetworkPolicy struct {
	cluster  logicalcluster.Name
	delegate extensionsv1beta1.NetworkPolicyInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedNetworkPolicy. It errors when
// there is a mismatch.
func (w *wrappedNetworkPolicy) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements NetworkPolicyInterface.
func (w *wrappedNetworkPolicy) Get(ctx context.Context, name string, opts metav1.GetOptions) (*extensionsapiv1beta1.NetworkPolicy, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements NetworkPolicyInterface.
func (w *wrappedNetworkPolicy) List(ctx context.Context, opts metav1.ListOptions) (*extensionsapiv1beta1.NetworkPolicyList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements NetworkPolicyInterface.
func (w *wrappedNetworkPolicy) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements NetworkPolicyInterface.
func (w *wrappedNetworkPolicy) Create(ctx context.Context, networkPolicy *extensionsapiv1beta1.NetworkPolicy, opts metav1.CreateOptions) (*extensionsapiv1beta1.NetworkPolicy, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, networkPolicy, opts)
}

// Update implements NetworkPolicyInterface.
func (w *wrappedNetworkPolicy) Update(ctx context.Context, networkPolicy *extensionsapiv1beta1.NetworkPolicy, opts metav1.UpdateOptions) (*extensionsapiv1beta1.NetworkPolicy, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, networkPolicy, opts)
}

// Delete implements NetworkPolicyInterface.
func (w *wrappedNetworkPolicy) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements NetworkPolicyInterface.
func (w *wrappedNetworkPolicy) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements NetworkPolicyInterface.
func (w *wrappedNetworkPolicy) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *extensionsapiv1beta1.NetworkPolicy, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements NetworkPolicyInterface.
func (w *wrappedNetworkPolicy) Apply(ctx context.Context, networkPolicy *extensionsapplyv1beta1.NetworkPolicyApplyConfiguration, opts metav1.ApplyOptions) (result *extensionsapiv1beta1.NetworkPolicy, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, networkPolicy, opts)
}

// WrappedExtensionsV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedExtensionsV1beta1) PodSecurityPolicies() extensionsv1beta1.PodSecurityPolicyInterface {
	return &wrappedPodSecurityPolicy{
		cluster:  w.cluster,
		delegate: w.delegate.PodSecurityPolicies(),
	}
}

type wrappedPodSecurityPolicy struct {
	cluster  logicalcluster.Name
	delegate extensionsv1beta1.PodSecurityPolicyInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedPodSecurityPolicy. It errors when
// there is a mismatch.
func (w *wrappedPodSecurityPolicy) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Get(ctx context.Context, name string, opts metav1.GetOptions) (*extensionsapiv1beta1.PodSecurityPolicy, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) List(ctx context.Context, opts metav1.ListOptions) (*extensionsapiv1beta1.PodSecurityPolicyList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Create(ctx context.Context, podSecurityPolicy *extensionsapiv1beta1.PodSecurityPolicy, opts metav1.CreateOptions) (*extensionsapiv1beta1.PodSecurityPolicy, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, podSecurityPolicy, opts)
}

// Update implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Update(ctx context.Context, podSecurityPolicy *extensionsapiv1beta1.PodSecurityPolicy, opts metav1.UpdateOptions) (*extensionsapiv1beta1.PodSecurityPolicy, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, podSecurityPolicy, opts)
}

// Delete implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *extensionsapiv1beta1.PodSecurityPolicy, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements PodSecurityPolicyInterface.
func (w *wrappedPodSecurityPolicy) Apply(ctx context.Context, podSecurityPolicy *extensionsapplyv1beta1.PodSecurityPolicyApplyConfiguration, opts metav1.ApplyOptions) (result *extensionsapiv1beta1.PodSecurityPolicy, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, podSecurityPolicy, opts)
}

// WrappedExtensionsV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedExtensionsV1beta1) ReplicaSets(namespace string) extensionsv1beta1.ReplicaSetInterface {
	return &wrappedReplicaSet{
		cluster:  w.cluster,
		delegate: w.delegate.ReplicaSets(namespace),
	}
}

type wrappedReplicaSet struct {
	cluster  logicalcluster.Name
	delegate extensionsv1beta1.ReplicaSetInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedReplicaSet. It errors when
// there is a mismatch.
func (w *wrappedReplicaSet) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements ReplicaSetInterface.
func (w *wrappedReplicaSet) Get(ctx context.Context, name string, opts metav1.GetOptions) (*extensionsapiv1beta1.ReplicaSet, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements ReplicaSetInterface.
func (w *wrappedReplicaSet) List(ctx context.Context, opts metav1.ListOptions) (*extensionsapiv1beta1.ReplicaSetList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements ReplicaSetInterface.
func (w *wrappedReplicaSet) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements ReplicaSetInterface.
func (w *wrappedReplicaSet) Create(ctx context.Context, replicaSet *extensionsapiv1beta1.ReplicaSet, opts metav1.CreateOptions) (*extensionsapiv1beta1.ReplicaSet, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, replicaSet, opts)
}

// Update implements ReplicaSetInterface.
func (w *wrappedReplicaSet) Update(ctx context.Context, replicaSet *extensionsapiv1beta1.ReplicaSet, opts metav1.UpdateOptions) (*extensionsapiv1beta1.ReplicaSet, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, replicaSet, opts)
}

// UpdateStatus implements ReplicaSetInterface. It was generated because the type contains a Status member.
func (w *wrappedReplicaSet) UpdateStatus(ctx context.Context, replicaSet *extensionsapiv1beta1.ReplicaSet, opts metav1.UpdateOptions) (*extensionsapiv1beta1.ReplicaSet, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, replicaSet, opts)
}

// Delete implements ReplicaSetInterface.
func (w *wrappedReplicaSet) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements ReplicaSetInterface.
func (w *wrappedReplicaSet) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements ReplicaSetInterface.
func (w *wrappedReplicaSet) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *extensionsapiv1beta1.ReplicaSet, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements ReplicaSetInterface.
func (w *wrappedReplicaSet) Apply(ctx context.Context, replicaSet *extensionsapplyv1beta1.ReplicaSetApplyConfiguration, opts metav1.ApplyOptions) (result *extensionsapiv1beta1.ReplicaSet, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, replicaSet, opts)
}

// ApplyStatus implements ReplicaSetInterface.
func (w *wrappedReplicaSet) ApplyStatus(ctx context.Context, replicaSet *extensionsapplyv1beta1.ReplicaSetApplyConfiguration, opts metav1.ApplyOptions) (result *extensionsapiv1beta1.ReplicaSet, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, replicaSet, opts)
}

// GetScale implements ReplicaSetInterface.
func (w *wrappedReplicaSet) GetScale(ctx context.Context, name string, opts metav1.GetOptions) (*extensionsapiv1beta1.Scale, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.GetScale(ctx, name, opts)
}

// UpdateScale implements ReplicaSetInterface.
func (w *wrappedReplicaSet) UpdateScale(ctx context.Context, name string, scale *extensionsapiv1beta1.Scale, opts metav1.UpdateOptions) (*extensionsapiv1beta1.Scale, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateScale(ctx, name, scale, opts)
}

// ApplyScale implements ReplicaSetInterface.
func (w *wrappedReplicaSet) ApplyScale(ctx context.Context, name string, scale *extensionsapplyv1beta1.ScaleApplyConfiguration, opts metav1.ApplyOptions) (result *extensionsapiv1beta1.Scale, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyScale(ctx, name, scale, opts)
}
