//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	batchapiv1 "k8s.io/api/batch/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	batchapplyv1 "k8s.io/client-go/applyconfigurations/batch/v1"
	batchv1 "k8s.io/client-go/kubernetes/typed/batch/v1"
	"k8s.io/client-go/rest"
)

// WrappedBatchV1 wraps the client interface with a
// logical cluster.
type WrappedBatchV1 struct {
	cluster  logicalcluster.Name
	delegate batchv1.BatchV1Interface
}

// New creates a WrappedBatchV1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate batchv1.BatchV1Interface) *WrappedBatchV1 {
	return &WrappedBatchV1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedBatchV1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedBatchV1 contains the wrapped logical cluster and interface.
func (w *WrappedBatchV1) CronJobs(namespace string) batchv1.CronJobInterface {
	return &wrappedCronJob{
		cluster:  w.cluster,
		delegate: w.delegate.CronJobs(namespace),
	}
}

type wrappedCronJob struct {
	cluster  logicalcluster.Name
	delegate batchv1.CronJobInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedCronJob. It errors when
// there is a mismatch.
func (w *wrappedCronJob) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements CronJobInterface.
func (w *wrappedCronJob) Get(ctx context.Context, name string, opts metav1.GetOptions) (*batchapiv1.CronJob, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements CronJobInterface.
func (w *wrappedCronJob) List(ctx context.Context, opts metav1.ListOptions) (*batchapiv1.CronJobList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements CronJobInterface.
func (w *wrappedCronJob) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements CronJobInterface.
func (w *wrappedCronJob) Create(ctx context.Context, cronJob *batchapiv1.CronJob, opts metav1.CreateOptions) (*batchapiv1.CronJob, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, cronJob, opts)
}

// Update implements CronJobInterface.
func (w *wrappedCronJob) Update(ctx context.Context, cronJob *batchapiv1.CronJob, opts metav1.UpdateOptions) (*batchapiv1.CronJob, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, cronJob, opts)
}

// UpdateStatus implements CronJobInterface. It was generated because the type contains a Status member.
func (w *wrappedCronJob) UpdateStatus(ctx context.Context, cronJob *batchapiv1.CronJob, opts metav1.UpdateOptions) (*batchapiv1.CronJob, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, cronJob, opts)
}

// Delete implements CronJobInterface.
func (w *wrappedCronJob) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements CronJobInterface.
func (w *wrappedCronJob) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements CronJobInterface.
func (w *wrappedCronJob) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *batchapiv1.CronJob, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements CronJobInterface.
func (w *wrappedCronJob) Apply(ctx context.Context, cronJob *batchapplyv1.CronJobApplyConfiguration, opts metav1.ApplyOptions) (result *batchapiv1.CronJob, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, cronJob, opts)
}

// ApplyStatus implements CronJobInterface.
func (w *wrappedCronJob) ApplyStatus(ctx context.Context, cronJob *batchapplyv1.CronJobApplyConfiguration, opts metav1.ApplyOptions) (result *batchapiv1.CronJob, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, cronJob, opts)
}

// WrappedBatchV1 contains the wrapped logical cluster and interface.
func (w *WrappedBatchV1) Jobs(namespace string) batchv1.JobInterface {
	return &wrappedJob{
		cluster:  w.cluster,
		delegate: w.delegate.Jobs(namespace),
	}
}

type wrappedJob struct {
	cluster  logicalcluster.Name
	delegate batchv1.JobInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedJob. It errors when
// there is a mismatch.
func (w *wrappedJob) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements JobInterface.
func (w *wrappedJob) Get(ctx context.Context, name string, opts metav1.GetOptions) (*batchapiv1.Job, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements JobInterface.
func (w *wrappedJob) List(ctx context.Context, opts metav1.ListOptions) (*batchapiv1.JobList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements JobInterface.
func (w *wrappedJob) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements JobInterface.
func (w *wrappedJob) Create(ctx context.Context, job *batchapiv1.Job, opts metav1.CreateOptions) (*batchapiv1.Job, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, job, opts)
}

// Update implements JobInterface.
func (w *wrappedJob) Update(ctx context.Context, job *batchapiv1.Job, opts metav1.UpdateOptions) (*batchapiv1.Job, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, job, opts)
}

// UpdateStatus implements JobInterface. It was generated because the type contains a Status member.
func (w *wrappedJob) UpdateStatus(ctx context.Context, job *batchapiv1.Job, opts metav1.UpdateOptions) (*batchapiv1.Job, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, job, opts)
}

// Delete implements JobInterface.
func (w *wrappedJob) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements JobInterface.
func (w *wrappedJob) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements JobInterface.
func (w *wrappedJob) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *batchapiv1.Job, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements JobInterface.
func (w *wrappedJob) Apply(ctx context.Context, job *batchapplyv1.JobApplyConfiguration, opts metav1.ApplyOptions) (result *batchapiv1.Job, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, job, opts)
}

// ApplyStatus implements JobInterface.
func (w *wrappedJob) ApplyStatus(ctx context.Context, job *batchapplyv1.JobApplyConfiguration, opts metav1.ApplyOptions) (result *batchapiv1.Job, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, job, opts)
}
