//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright YEAR The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	"github.com/kcp-dev/logicalcluster"
	appsapiv1beta1 "k8s.io/api/apps/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	appsapplyv1beta1 "k8s.io/client-go/applyconfigurations/apps/v1beta1"
	appsv1beta1 "k8s.io/client-go/kubernetes/typed/apps/v1beta1"
	"k8s.io/client-go/rest"
)

// WrappedAppsV1beta1 wraps the client interface with a
// logical cluster.
type WrappedAppsV1beta1 struct {
	cluster  logicalcluster.Name
	delegate appsv1beta1.AppsV1beta1Interface
}

// New creates a WrappedAppsV1beta1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate appsv1beta1.AppsV1beta1Interface) *WrappedAppsV1beta1 {
	return &WrappedAppsV1beta1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedAppsV1beta1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedAppsV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedAppsV1beta1) ControllerRevisions(namespace string) appsv1beta1.ControllerRevisionInterface {
	return &wrappedControllerRevision{
		cluster:  w.cluster,
		delegate: w.delegate.ControllerRevisions(namespace),
	}
}

type wrappedControllerRevision struct {
	cluster  logicalcluster.Name
	delegate appsv1beta1.ControllerRevisionInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedControllerRevision. It errors when
// there is a mismatch.
func (w *wrappedControllerRevision) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements ControllerRevisionInterface.
func (w *wrappedControllerRevision) Get(ctx context.Context, name string, opts metav1.GetOptions) (*appsapiv1beta1.ControllerRevision, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements ControllerRevisionInterface.
func (w *wrappedControllerRevision) List(ctx context.Context, opts metav1.ListOptions) (*appsapiv1beta1.ControllerRevisionList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements ControllerRevisionInterface.
func (w *wrappedControllerRevision) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements ControllerRevisionInterface.
func (w *wrappedControllerRevision) Create(ctx context.Context, controllerRevision *appsapiv1beta1.ControllerRevision, opts metav1.CreateOptions) (*appsapiv1beta1.ControllerRevision, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, controllerRevision, opts)
}

// Update implements ControllerRevisionInterface.
func (w *wrappedControllerRevision) Update(ctx context.Context, controllerRevision *appsapiv1beta1.ControllerRevision, opts metav1.UpdateOptions) (*appsapiv1beta1.ControllerRevision, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, controllerRevision, opts)
}

// Delete implements ControllerRevisionInterface.
func (w *wrappedControllerRevision) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements ControllerRevisionInterface.
func (w *wrappedControllerRevision) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements ControllerRevisionInterface.
func (w *wrappedControllerRevision) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *appsapiv1beta1.ControllerRevision, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements ControllerRevisionInterface.
func (w *wrappedControllerRevision) Apply(ctx context.Context, controllerRevision *appsapplyv1beta1.ControllerRevisionApplyConfiguration, opts metav1.ApplyOptions) (result *appsapiv1beta1.ControllerRevision, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, controllerRevision, opts)
}

// WrappedAppsV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedAppsV1beta1) Deployments(namespace string) appsv1beta1.DeploymentInterface {
	return &wrappedDeployment{
		cluster:  w.cluster,
		delegate: w.delegate.Deployments(namespace),
	}
}

type wrappedDeployment struct {
	cluster  logicalcluster.Name
	delegate appsv1beta1.DeploymentInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedDeployment. It errors when
// there is a mismatch.
func (w *wrappedDeployment) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements DeploymentInterface.
func (w *wrappedDeployment) Get(ctx context.Context, name string, opts metav1.GetOptions) (*appsapiv1beta1.Deployment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements DeploymentInterface.
func (w *wrappedDeployment) List(ctx context.Context, opts metav1.ListOptions) (*appsapiv1beta1.DeploymentList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements DeploymentInterface.
func (w *wrappedDeployment) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements DeploymentInterface.
func (w *wrappedDeployment) Create(ctx context.Context, deployment *appsapiv1beta1.Deployment, opts metav1.CreateOptions) (*appsapiv1beta1.Deployment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, deployment, opts)
}

// Update implements DeploymentInterface.
func (w *wrappedDeployment) Update(ctx context.Context, deployment *appsapiv1beta1.Deployment, opts metav1.UpdateOptions) (*appsapiv1beta1.Deployment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, deployment, opts)
}

// UpdateStatus implements DeploymentInterface. It was generated because the type contains a Status member.
func (w *wrappedDeployment) UpdateStatus(ctx context.Context, deployment *appsapiv1beta1.Deployment, opts metav1.UpdateOptions) (*appsapiv1beta1.Deployment, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, deployment, opts)
}

// Delete implements DeploymentInterface.
func (w *wrappedDeployment) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements DeploymentInterface.
func (w *wrappedDeployment) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements DeploymentInterface.
func (w *wrappedDeployment) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *appsapiv1beta1.Deployment, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements DeploymentInterface.
func (w *wrappedDeployment) Apply(ctx context.Context, deployment *appsapplyv1beta1.DeploymentApplyConfiguration, opts metav1.ApplyOptions) (result *appsapiv1beta1.Deployment, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, deployment, opts)
}

// ApplyStatus implements DeploymentInterface.
func (w *wrappedDeployment) ApplyStatus(ctx context.Context, deployment *appsapplyv1beta1.DeploymentApplyConfiguration, opts metav1.ApplyOptions) (result *appsapiv1beta1.Deployment, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, deployment, opts)
}

// WrappedAppsV1beta1 contains the wrapped logical cluster and interface.
func (w *WrappedAppsV1beta1) StatefulSets(namespace string) appsv1beta1.StatefulSetInterface {
	return &wrappedStatefulSet{
		cluster:  w.cluster,
		delegate: w.delegate.StatefulSets(namespace),
	}
}

type wrappedStatefulSet struct {
	cluster  logicalcluster.Name
	delegate appsv1beta1.StatefulSetInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedStatefulSet. It errors when
// there is a mismatch.
func (w *wrappedStatefulSet) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements StatefulSetInterface.
func (w *wrappedStatefulSet) Get(ctx context.Context, name string, opts metav1.GetOptions) (*appsapiv1beta1.StatefulSet, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements StatefulSetInterface.
func (w *wrappedStatefulSet) List(ctx context.Context, opts metav1.ListOptions) (*appsapiv1beta1.StatefulSetList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements StatefulSetInterface.
func (w *wrappedStatefulSet) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements StatefulSetInterface.
func (w *wrappedStatefulSet) Create(ctx context.Context, statefulSet *appsapiv1beta1.StatefulSet, opts metav1.CreateOptions) (*appsapiv1beta1.StatefulSet, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, statefulSet, opts)
}

// Update implements StatefulSetInterface.
func (w *wrappedStatefulSet) Update(ctx context.Context, statefulSet *appsapiv1beta1.StatefulSet, opts metav1.UpdateOptions) (*appsapiv1beta1.StatefulSet, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, statefulSet, opts)
}

// UpdateStatus implements StatefulSetInterface. It was generated because the type contains a Status member.
func (w *wrappedStatefulSet) UpdateStatus(ctx context.Context, statefulSet *appsapiv1beta1.StatefulSet, opts metav1.UpdateOptions) (*appsapiv1beta1.StatefulSet, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, statefulSet, opts)
}

// Delete implements StatefulSetInterface.
func (w *wrappedStatefulSet) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements StatefulSetInterface.
func (w *wrappedStatefulSet) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements StatefulSetInterface.
func (w *wrappedStatefulSet) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *appsapiv1beta1.StatefulSet, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// Apply implements StatefulSetInterface.
func (w *wrappedStatefulSet) Apply(ctx context.Context, statefulSet *appsapplyv1beta1.StatefulSetApplyConfiguration, opts metav1.ApplyOptions) (result *appsapiv1beta1.StatefulSet, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Apply(ctx, statefulSet, opts)
}

// ApplyStatus implements StatefulSetInterface.
func (w *wrappedStatefulSet) ApplyStatus(ctx context.Context, statefulSet *appsapplyv1beta1.StatefulSetApplyConfiguration, opts metav1.ApplyOptions) (result *appsapiv1beta1.StatefulSet, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.ApplyStatus(ctx, statefulSet, opts)
}
